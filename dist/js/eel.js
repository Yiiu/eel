!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Eel=e()}(this,function(){"use strict";function t(t,e){Object.keys(e).forEach(function(i){t[i]=e[i]})}function e(t,e){Object.keys(e).forEach(function(i){Object.defineProperty(t,i,{configurable:!0,enumerable:!0,get:function(){return e[i]},set:function(t){return e[i]=t}})})}function i(t){if(!x.test(t)){var e=t.split(".");return function(t){for(var i=0;i<e.length;i++){if(!t)return;t=t[e[i]]}return t}}}function n(t,e){if(!x.test(t)){var i=t.split(".");return function(t){for(var n=0;n<i.length-1;n++){if(!e)return;e=e[i[n]]}e[i[i.length-1]]=t}}}function o(t){if("object"===(void 0===t?"undefined":N(t))){return new S(t)}}function r(t,e,i){var n=new O,r=(Object.getOwnPropertyDescriptor(t,i),o(e));Object.defineProperty(t,i,{get:function(){return O.target&&(n.depend(),r&&r.dep.depend()),e},set:function(t){t!==e&&(r&&r.dep.notify(),r=o(t),e=t,n.notify())}})}function s(){var t=this._data=this.$option.data;this._ob=new S(t),e(this,t)}function a(){var t=this;this.$option.watch&&Object.keys(this.$option.watch).forEach(function(e){t.$watch(e,t.$option.watch[e])})}function u(){e(this,this.$option.methods)}function c(t,e){t.nextSibling?t.parentNode.insertBefore(e,t):t.parentNode.appendChild(e),t.parentNode.removeChild(t)}function h(t){var e=[],i=document.createElement("div");i.innerHTML=t;for(var n=0;n<i.childNodes.length;n++)"\n"!==i.childNodes[n].textContent.trim()&&""!==i.childNodes[n].textContent.trim()&&e.push(i.childNodes[n]);return e.length?e[0]:e}function f(t,e){e.parentNode.insertBefore(t,e)}function l(t){t.parentNode.removeChild(t)}function p(t){T(t),j(t),C(t),L(t)}function d(t,e){var i={name:t};return Object.keys(e).forEach(function(t){i[t]=e[t]}),i}function v(t,e){var i=d(t,e);return this.$directives[t]?console.error("已经存在"+t+"指令"):this.$directives[t]=i,this}function m(){var t=this.$template.innerHTML;"string"==typeof t&&(t=h(t)),t instanceof Array&&console.error("需要根节点"),this._compileNode(t),this.$el.appendChild(t),this.$template.innerHTML=""}function y(t){if(1===t.nodeType)this._compileDomNode(t);else if(3===t.nodeType){if("\n"===t.data)return;this._compileTextNode(t)}}function g(t,e){var i=H.exec(t.name)[1],n=A.exec(t.name)[1];new M(i,e,this,{name:t.name,tag:n,val:t.nodeValue})}function b(t){var e=this;Array.prototype.slice.call(t.attributes).forEach(function(i){H.test(i.name)&&e._compileDir(i,t)}),Array.from(t.childNodes).forEach(function(t){e._compileNode(t)})}function _(t){var e=this,i=$(t.data);i&&(i.forEach(function(i){if(i.tag){var n=i.value,o=document.createTextNode("");new M("text",o,e,{val:n}),f(o,t)}else{f(document.createTextNode(i.value),t)}}),l(t))}function $(t){if(""!==t||!P.test(t)){for(var e=[],i=void 0,n=void 0,o=void 0,r=0;i=P.exec(t);){if((n=i.index)>r){var s=t.slice(r,n);"\n"!==s.trim()&&""!==s.trim()&&e.push({value:t.slice(r,n)})}o=i[1],e.push({tag:!0,value:o.trim()}),r=n+i[0].length}if(r<t.length-1){var a=t.slice(r);"\n"!==a.trim()&&""!==a.trim()&&e.push({value:a})}return e}}function w(t){!this instanceof w&&console.error("error new"),this._init(t)}var x=/[^\w.$]/,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},E=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),O=function(){function t(){k(this,t),this.subs=[]}return E(t,[{key:"addSub",value:function(t){this.subs.push(t)}},{key:"notify",value:function(){for(var t=0;t<this.subs.length;t++)this.subs[t].update()}},{key:"depend",value:function(){t.target&&t.target.addDep(this)}}]),t}();O.target=null;var S=function(){function t(e){k(this,t),this.value=e,this.walk(e),this.dep=new O}return E(t,[{key:"walk",value:function(t){for(var e in t)r(this.value,this.value[e],e)}}]),t}(),T=function(t){t.directives("text",{bind:function(){this.el.textContent=this.getter()},update:function(t,e){this.el.textContent=e}})},j=function(t){t.directives("if",{bind:function(){var t=this.getter();this._Pla=document.createComment("(●ˇ∀ˇ●)");this._el=this.el,t||this.hide()},update:function(t,e){e?this.show():this.hide()},show:function(){c(this._Pla,this._el)},hide:function(){c(this.el,this._Pla)}})},C=function(t){t.directives("on",{bind:function(){var t=this;this.el.addEventListener(this.arg,function(e){return t.vm[t.val].call(t.vm,e)})},update:function(t,e){}})},L=function(t){t.directives("model",{bind:function(){var t=this,e=this.getter(),i=!1;this.el.value=e,this.el.addEventListener("compositionstart",function(){i=!0}),this.el.addEventListener("compositionend",function(e){i=!1,t.vm.$set(t.val,e.target.value)}),this.el.addEventListener("input",function(e){i||t.vm.$set(t.val,e.target.value)})},update:function(t,e){this.el.value=e}})},D=0,M=function(){function e(i,n,o,r){k(this,e),this.name=i,this.el=n,this.vm=o,this.arg="",this.val=r.val,this._name=r.name,this.modifiers={},this.compile(r),t(this,this.vm.$directives[i]),this._init()}return E(e,[{key:"compile",value:function(t){var e=this,i=t.tag;if(t&&t.tag){var n=/:(\w+)/;if(n.exec(i)){var o=n.exec(i);this.arg=o[1],i=i.slice(o.index+this.arg.length+1,i.length)}i.split(".").forEach(function(t){""!==t&&(e.modifiers[t]=!0)})}}},{key:"getter",value:function(){return i(this.val)(this.vm)}},{key:"setter",value:function(t){return n(this.val)(this.vm,t)}},{key:"_init",value:function(){var t=this;this._name&&this.el.removeAttribute(this._name),this.bind&&this.bind(),this.literal?this.update&&this.update():this.vm.$watch(this.val,function(e,i){t.update&&t.update(e,i)})}}]),e}(),P=/\{\{((?:.|\n)+?)\}\}/g,H=/^v-(\w+)/,A=/v-(.*)/,F=function(){function t(e,n,o){k(this,t),this.vm=e,this.expOrFn=n,this.cb=o,this.getter=i(n),this.val=this.get()}return E(t,[{key:"get",value:function(){O.target=this;var t=this.getter?this.getter(this.vm):this.vm[this.expOrFn];return O.target=null,t}},{key:"addDep",value:function(t){t.addSub(this)}},{key:"update",value:function(){var t=this.getter?this.getter(this.vm):this.vm[this.expOrFn];if(t!==this.val){var e=this.val;this.val=t,this.cb.call(this.vm,e,this.val)}}}]),t}();return w.component=function(t){console.log(t)},function(t){t.prototype._init=function(t){this.$option=t,this._watcher=[],this._uid=D++,this.$directives={},this.$root={},this.$parent=t.parent,this.$el=document.querySelector(this.$option.el),this.$root=this.$parent?this.$parent.$root:this,this.$template=document.querySelector(this.$option.template||vm.$option.el),this._initState(),this._initWatch(),this._initMethods(),p(this),this._parseHTML()}}(w),function(t){t._watcher=[],t.prototype._initState=s,t.prototype._initWatch=a,t.prototype._initMethods=u}(w),function(t){t.prototype.directives=v}(w),function(t){t.prototype._parseHTML=m,t.prototype._compileDir=g,t.prototype._compileNode=y,t.prototype._compileDomNode=b,t.prototype._compileTextNode=_,t.prototype.component=function(t,e){console.log(t)}}(w),function(t){t.prototype.$watch=function(t,e){var i=new F(this,t,e);return this._watcher.push(i),this},t.prototype.$set=function(t,e){return n(t,this)(e),this},t.prototype.$get=function(t,e){return i(t)(this)}}(w),w});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
